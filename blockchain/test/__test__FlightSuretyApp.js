// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var FlightSuretyApp = artifacts.require('FlightSuretyApp')

contract('FlightSuretyApp', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    const ownerID = accounts[0]
    const passengerID = accounts[1]
    const airlineID = accounts[2];
    const passengerInsuredAmount = 10;
    const flight = "ZEN234";
    const oracleExample = accounts[3];
    const timestamp = 20190305;

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Passenger: accounts[1] ", accounts[1])
    console.log("Airline: accounts[2] ", accounts[2])
    console.log("Oracle: accounts[3] ", accounts[3])

    it("Testing registerFlight function", async() => {
        const instance = await FlightSuretyApp.deployed()

        let eventEmittedFirst = false;
        
        await instance.registerFlight(flight, airlineID, timestamp, passengerInsuredAmount, {from: passengerID, value: passengerInsuredAmount});
        await instance.contract.events.Success(function(error, event){ 
            eventEmittedFirst = true 
        });
       
        assert.equal(eventEmittedFirst, true, 'Invalid Farmer Setting')  
        
    })

    it("Testing registerDefaultOracle function", async() => {
        const instance = await FlightSuretyApp.deployed()

        await instance.registerDefaultOracles(oracleExample, {from: ownerID});
        let result = await instance.getIndexOfOracle.call(oracleExample);
        console.log(result);
        assert.equal(result[0].length, 1, 'NO Array was returned')  
        
    })

    it("Testing fetchFlightStatus function", async() => {

        // fetchFlightStatus(
        //     address airline,
        //     string calldata flight,
        //     uint256 timestamp
        // )

        const instance = await FlightSuretyApp.deployed()

        let eventEmittedFirst = false;
        
        await instance.fetchFlightStatus(airlineID, flight, timestamp, {from: ownerID});

        instance.contract.events.OracleRequest({
            // filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23
            fromBlock: 0
        }, function(error, event){ console.log(event); })
        .on('data', function(event){
            console.log(event.returnValues); // same results as the optional callback above
            eventEmittedFirst = true;
        })
        .on('changed', function(event){
            // remove event from local database
        })
        .on('error', console.error);

  
        assert.equal(eventEmittedFirst, true, 'Event was not emitted')  
        
    })
});


// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var FlightSuretyApp = artifacts.require('FlightSuretyApp')

contract('FlightSuretyApp', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    const ownerID = accounts[0]
    const passengerID = accounts[1]
    const passengerInsuredAmount = 10;
    const flight = "ZEN234";

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Passenger: accounts[1] ", accounts[1])
    console.log("Airline: accounts[2] ", accounts[2])

    it("Testing registerPassenger function", async() => {
        const instance = await FlightSuretyApp.deployed()


        let eventEmittedFirst = false;
        
        await instance.registerPassenger(flight, passengerInsuredAmount, {from: passengerID, value: passengerInsuredAmount});
        await instance.contract.events.Success(function(error, event){ 
            eventEmittedFirst = true 
        });
       
        assert.equal(eventEmittedFirst, true, 'Invalid Farmer Setting')  
        
    })
});

